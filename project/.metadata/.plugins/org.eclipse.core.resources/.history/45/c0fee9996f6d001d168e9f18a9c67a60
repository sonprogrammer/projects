package bbs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

public class BbsDAO {
	private Connection conn;
	// DB 접근 객체

	private PreparedStatement pstmt;
	private ResultSet rs;
	// 정보를 담을 객체

	public BbsDAO() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/DB?characterEncoding=UTF-8&sereverTimezone=UTC";
					
					//"jdbc:mysql://localhost:3306/DB";

			// localhost:3306 -> 컴퓨터에 설치된 mysql, port 3306의 DB(내가 저장한이)라는 데이터베이스에 접근

			//"jdbc:mysql://localhost:3306/DB?characterEncoding=UTF-8&sereverTimezone=UTC"
			// String dbURL = "jdbc --- BBS?allowPublicKeyRetrieval=true";


			String dbID = "uroot";
			String dbPassword = "Sks729581@";
			Class.forName("com.mysql.jdbc.Driver");
			// mysql에 접속할 수 있도록 매개체 역할을 해주는 하나의 라이브러리, jdbc 드라이 로드

			conn = DriverManager.getConnection(dbURL, dbID, dbPassword);
			// 데이터베이스에 접속되면 con객체에 접속정보가 저장
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getDate() {
		String SQL = "SELECT NOW()";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getString(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}

	public int getNext() {
		String SQL = "SELECT bbsID FROM DB ORDER BY bbsID DESC";
		// #@$#%@#%@$%여기서 DB인지 BBS인지 저기에 들어갈께 프로젝트 이름인지 아님 mysql에 넣은 그 DB이름인지보기
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getInt(1) + 1;
			}
			return 1; // 첫번째 게시물인 경우
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}

	public int write(String bbsTitle, String userID, String bbsContent) {
		String SQL = "INSERT INTO DB VALUES (? ,? ,? ,? ,? ,?)";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext()); // bbsID
			pstmt.setString(2, bbsTitle);
			pstmt.setString(3, userID);
			pstmt.setString(4, getDate());
			pstmt.setString(5, bbsContent);
			pstmt.setInt(6, 1); //
			return pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1; // 데이터베이스 오류
	}

	public ArrayList<Bbs> getList(int pageNumber) {
		String SQL = "SELECT * FROM BBS WHERE bbsID <? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10";
		// bbsID가 특정조건보다 작을때 available =1 (삭제되지 않고), 10개까지 제한해서 나타냄
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			/*
			 * getNext = 다음에 작성될 글의번호, 만약 2page, 15번이라면 15 - (2-1)*10 =5, 즉 2page 1, 2, 3, 4
			 * 총 4개의 글이 나타남 만약 1page, 6번이라면 6 - (1-1)*10 = 6, 즉 1page 1, 2, 3, 4 ,5 총 5개의 글이
			 * 나타남
			 */

			rs = pstmt.executeQuery();

			while (rs.next()) { // 값이 존재할 동안,
				Bbs bbs = new Bbs();
				bbs.setBbsID(rs.getInt(1));
				bbs.setBbsTitle(rs.getString(2));
				bbs.setUserID(rs.getString(3));
				bbs.setBbsDate(rs.getString(4));
				bbs.setBbsContent(rs.getString(5));
				bbs.setBbsAvailable(rs.getInt(6));
				list.add(bbs);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	public boolean nextPage(int pageNumber) // 페이징 처리
	{
		String SQL = "SELECT * FROM BBS WHERE bbsID <? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10";
		// bbsID가 특정조건보다 작을때, Available = 1 (삭제되지 않고), 10개까지 제한해서 나타냄
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			/*
			 * getNext = 다음에 작성될 글의번호, 만약 2page, 15번이라면 15 - (2-1)*10 =5, 즉 2page 1, 2, 3, 4
			 * 총 4개의 글이 나타남 만약 1page, 6번이라면 6 - (1-1)*10 = 6, 즉 1page 1, 2, 3, 4 ,5 총 5개의 글이
			 * 나타남
			 */

			rs = pstmt.executeQuery();

			if (rs.next()) { // 값이 존재할 동안
				return true;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public Bbs getBbs(int bbsID) {
		String SQL = "SELECT * FROM BBS WHERE bbsID = ?";
		// #@$#%@#%@$%여기서 DB인지 BBS인지 저기에 들어갈께 프로젝트 이름인지 아님 mysql에 넣은 그 DB이름인지보기
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				Bbs bbs = new Bbs();
				bbs.setBbsID(rs.getInt(1));
				bbs.setBbsTitle(rs.getString(2));
				bbs.setUserID(rs.getString(3));
				bbs.setBbsDate(rs.getString(4));
				bbs.setBbsContent(rs.getString(5));
				bbs.setBbsAvailable(rs.getInt(6));
				return bbs;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public int update(int bbsID, String bbsTitle, String bbsContent) {
		String SQL = "UPDATE BBS SET bbsTitle =?, bbsContent =? WHERE bbsID =?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, bbsTitle); // bbsID
			pstmt.setString(2, bbsContent);
			pstmt.setInt(3, bbsID); //
			return pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1; // 데이터베이스 오류
	}

	public int delete(int bbsID) {
		String SQL = "UPDATE BBS SET bbsAvailable = 0, WHERE bbsID =?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID); // bbsID
			return pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}
}
